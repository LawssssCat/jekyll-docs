(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var lazyload = require('lazyload');
var TOOL = require('tool-box');
var logger = require('logger');

lazyload.onload(function () {
  var articleContent = window.document.querySelector('.js-article-content');

  // 'h1[id], h2[id], ...'
  var selectors = ['h1[id]', 'h2[id]', 'h3[id]', 'h4[id]', 'h5[id]'];
  var headings = articleContent.querySelectorAll(selectors.join(','));

  // anchor
  headings.forEach(function (dom) {
    var anchor = window.document.createElement('a');
    anchor.classList.add('anchor');
    anchor.classList.add('d-print-none');
    anchor.classList.add('fas');
    anchor.classList.add('fa-link');
    dom.appendChild(anchor);
    anchor.addEventListener('click', function (e) {
      e.preventDefault();
      TOOL.historyPushHash(dom.id);
    });
  });

  // scroll
  var pageScrollTarget = window.VARIABLES.pageScrollTarget || TOOL.throwError('undefined "pageScrollTarget"');
  var pageScroller = window.VARIABLES.pageScroller || TOOL.throwError('undefined "pageScroller"');

  var headingsTree = new HeadingsTree(headings);

  var func = void 0;
  pageScrollTarget.addEventListener('scroll', func = function func(e) {
    logger.isDebug() && logger.debug('article.js', e);
    var handingDomActiveList = void 0;
    try {
      handingDomActiveList = updateArticleHandingDomActive(headings, headingsTree, pageScroller);
    } catch (error) {
      logger.error(error);
    }
    window.dispatchEvent(new CustomEvent('headingsActiveUpdate', {
      detail: handingDomActiveList
    }));
  });
  window.addEventListener('resize', func);
  window.addEventListener('load', func);
  window.addEventListener('require headingsActiveUpdate', func);
});

function updateArticleHandingDomActive(headingsDom, headingsDomTree, pageScroller) {
  var detectHeight = pageScroller.clientHeight / 4;
  var myScrollTop = pageScroller.scrollTop + Math.max(detectHeight, 100);
  var i = void 0,
      activeHeader = null;
  for (i = 0; i < headingsDom.length; i++) {
    var currentHeader = headingsDom[i];
    var headingBottom = TOOL.positionRelative(currentHeader, pageScroller).top + currentHeader.clientHeight;
    if (myScrollTop > headingBottom) {
      activeHeader = currentHeader;
    } else {
      break; // next
    }
  }

  // clear active
  headingsDom.forEach(function (dom) {
    dom.classList.remove('active');
  });
  // active
  var activeDom = [];
  if (activeHeader) {
    var activeNode = headingsDomTree.getNode(i - 1);
    while (activeNode) {
      activeDom.push(activeNode.dom);
      activeNode.dom.classList.add('active');
      activeNode = headingsDomTree.getParent(activeNode);
    }
  }
  return activeDom;
}

function getHeadingDomlevel(headingDom) {
  // h1 => 1, h2 => 2 , ...
  var str = headingDom.tagName.slice(1);
  return parseInt(str);
}

var HeadingsTree = function () {
  function HeadingsTree(headings) {
    var _this = this;

    _classCallCheck(this, HeadingsTree);

    this.size = headings.length;
    this.root = {
      children: []
    };
    var curNode = this.root;
    this.nodeList = new Array(headings.length);
    headings.forEach(function (headingDom, index) {
      var node = _this.nodeList[index] = {
        index: index,
        level: getHeadingDomlevel(headingDom),
        dom: headingDom,
        children: []
      };
      var ok = false;
      do {
        if (curNode == _this.root) {
          node.parent = curNode;
          curNode.children.push(node);
          curNode = node;
          ok = true;
        } else if (curNode.level == node.level) {
          node.parent = curNode.parent;
          curNode.parent.children.push(node);
          curNode = node;
          ok = true;
        } else if (curNode.level < node.level) {
          node.parent = curNode;
          curNode.children.push(node);
          curNode = node;
          ok = true;
        } else {
          curNode = curNode.parent; // curNode.level --
        }
      } while (!ok);
    });
  }

  _createClass(HeadingsTree, [{
    key: 'getNode',
    value: function getNode(index) {
      return this.nodeList[index];
    }
  }, {
    key: 'getParent',
    value: function getParent(node) {
      return node.parent == this.root ? null : node.parent;
    }
  }]);

  return HeadingsTree;
}();

},{"lazyload":undefined,"logger":undefined,"tool-box":undefined}]},{},[1]);
