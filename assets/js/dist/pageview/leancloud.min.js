(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
'use strict';

var lazyload = require('lazyload');

var _require = require('lib/popper'),
    Popper = _require.Popper;

var sources = window.VARIABLES.sources;

lazyload.js([sources.leancloud_sdk.js, sources.popper.js], function () {

  if (!window.AV) throw new Error('needs AV obj from leancloud_sdk.js');

  var _window$VARIABLES$pav = window.VARIABLES.paveview,
      appId = _window$VARIABLES$pav.appId,
      appKey = _window$VARIABLES$pav.appKey,
      appClass = _window$VARIABLES$pav.appClass;

  var _require2 = require('lib/leancloud'),
      Pageview = _require2.Pageview;

  var pageView = new Pageview(window.AV, {
    appId: appId,
    appKey: appKey,
    appClass: appClass
  });
  actions4Artical(pageView);
});

function actions4Artical(pageView) {
  // article query and increase
  window.document.querySelectorAll('.js-pageview[data-one-page-action=increase]').forEach(function (item) {
    var key = item.getAttribute('data-one-page-key');
    var title = item.getAttribute('data-one-page-title');
    pageView.increase(key, title, function (views) {
      updateDOMCounter(item, views);
    });
  });
  // article query only
  var articleMap = {};
  window.document.querySelectorAll('.js-pageview[data-one-page-action=query]').forEach(function (item) {
    var key = item.getAttribute('data-one-page-key');
    articleMap[key] = item;
  });
  var articleMapKeys = Object.keys(articleMap);
  if (articleMapKeys && articleMapKeys.length > 0) {
    pageView.queryBatch(articleMapKeys, function (result) {
      if (result) {
        result.forEach(function (pv) {
          var attributes = pv.attributes;
          var key = attributes.key,
              views = attributes.views;
          var dom = articleMap[key];
          updateDOMCounter(dom, views);
        });
      }
    });
  }
}

function updateDOMCounter(item, views) {
  var str = void 0,
      flag = false;
  if (views >= 1000000) {
    var num = (views / 1000000).toFixed(2);
    str = num + 'Million+';
    flag = true;
  } else if (views >= 1000) {
    var _num = (views / 1000).toFixed(1);
    str = _num + 'K+';
    flag = true;
  } else {
    str = '' + views;
  }
  var numWrapper = item.querySelector('.views-num');
  numWrapper.innerHTML = str;
  if (flag) {
    // see popover.js
    var popper = new Popper({
      popperConfigPlacement: 'bottom',
      toggle: item,
      toggleEvents: ['hover'],
      content: views.toLocaleString()
    });
    popper.init();
  }
}

},{"lazyload":undefined,"lib/leancloud":2,"lib/popper":undefined}],2:[function(require,module,exports){
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

// see https://leancloud.cn/docs/leanstorage_guide-js.html
// open debug mode 
// localStorage.setItem('debug', 'leancloud*');

var Pageview = function () {
  function Pageview(_AV, options) {
    _classCallCheck(this, Pageview);

    this.AV = _AV;
    var config = {};
    this.appId = config.appId = options.appId;
    this.appKey = config.appKey = options.appKey;
    if (options.serverUrl) {
      this.serverUrl = config.serverUrl = options.serverUrl;
    }
    this.appClass = options.appClass;

    this.AV.init(config);
  }

  _createClass(Pageview, [{
    key: 'search',
    value: function search(key) {
      var query = new this.AV.Query(this.appClass);
      query.equalTo('key', key);
      return query.first();
    }
  }, {
    key: 'searchBatch',
    value: function searchBatch(keys) {
      var _this = this,
          _AV$Query;

      var queryList = new Array(keys.length);
      keys.forEach(function (key, index) {
        var query = new _this.AV.Query(_this.appClass);
        query.equalTo('key', key);
        queryList[index] = query;
      });
      return (_AV$Query = this.AV.Query).or.apply(_AV$Query, queryList).find();
    }
  }, {
    key: 'insert',
    value: function insert(key, title) {
      var views = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;

      var PV = this.AV.Object.extend(this.appClass);
      var _pv = new PV();
      _pv.set('title', title);
      _pv.set('key', key);
      _pv.set('views', views);
      return _pv.save();
    }
  }, {
    key: 'increment',
    value: function increment(pv) {
      pv.increment('views', 1);
      return pv.save();
    }
  }, {
    key: 'queryBatch',
    value: function queryBatch(keys, callback) {
      return this.searchBatch(keys).then(function (result) {
        callback && callback(result);
      });
    }
  }, {
    key: 'increase',
    value: function increase(key, title, callback) {
      var _this2 = this;

      return this.search(key).then(function (result) {
        if (result) {
          return _this2.increment(result);
        } else {
          return _this2.insert(key, title, 0).then(function (pv) {
            return _this2.increment(pv);
          });
        }
      }).then(function (pv) {
        return callback && callback(pv.attributes.views);
      });
    }
  }]);

  return Pageview;
}();

module.exports = {
  Pageview: Pageview
};

},{}]},{},[1]);
